// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	DiscoverRequestsRequest
	Principal
	Subject
	ContextRequest
	DiscoverRequestsResponse
	ResetRequestsRequest
	ResetRequestsResponse
	DiscoverPoliciesRequest
	DiscoverPoliciesResponse
	Function
	FunctionQueryRequest
	FunctionQueryResponse
	AndPrincipals
	Empty
	ServiceRequest
	PolicyRequest
	ServiceQueryResponse
	ServiceQueryRequest
	PolicyQueryRequest
	PolicyQueryResponse
	Policy
	RolePolicyRequest
	RolePolicyQueryRequest
	RolePolicyQueryResponse
	RolePolicy
	Service
	PolicyAndRolePolicyCounts
	PolicyCountsMap
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Effect int32

const (
	Effect_GRANT Effect = 0
	Effect_DENY  Effect = 1
)

var Effect_name = map[int32]string{
	0: "GRANT",
	1: "DENY",
}
var Effect_value = map[string]int32{
	"GRANT": 0,
	"DENY":  1,
}

func (x Effect) String() string {
	return proto.EnumName(Effect_name, int32(x))
}
func (Effect) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceType int32

const (
	ServiceType_APPLICATION ServiceType = 0
	ServiceType_K8S_CLUSTER ServiceType = 1
)

var ServiceType_name = map[int32]string{
	0: "APPLICATION",
	1: "K8S_CLUSTER",
}
var ServiceType_value = map[string]int32{
	"APPLICATION": 0,
	"K8S_CLUSTER": 1,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}
func (ServiceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DiscoverRequestsRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	Last        bool   `protobuf:"varint,2,opt,name=last" json:"last,omitempty"`
	Revision    int64  `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *DiscoverRequestsRequest) Reset()                    { *m = DiscoverRequestsRequest{} }
func (m *DiscoverRequestsRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverRequestsRequest) ProtoMessage()               {}
func (*DiscoverRequestsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DiscoverRequestsRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *DiscoverRequestsRequest) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

func (m *DiscoverRequestsRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type Principal struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Idd  string `protobuf:"bytes,3,opt,name=idd" json:"idd,omitempty"`
}

func (m *Principal) Reset()                    { *m = Principal{} }
func (m *Principal) String() string            { return proto.CompactTextString(m) }
func (*Principal) ProtoMessage()               {}
func (*Principal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Principal) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Principal) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Principal) GetIdd() string {
	if m != nil {
		return m.Idd
	}
	return ""
}

type Subject struct {
	Principals []*Principal `protobuf:"bytes,1,rep,name=principals" json:"principals,omitempty"`
	TokenType  string       `protobuf:"bytes,2,opt,name=tokenType" json:"tokenType,omitempty"`
	Token      string       `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (m *Subject) String() string            { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Subject) GetPrincipals() []*Principal {
	if m != nil {
		return m.Principals
	}
	return nil
}

func (m *Subject) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *Subject) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ContextRequest struct {
	Subject     *Subject          `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	ServiceName string            `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	Resource    string            `protobuf:"bytes,3,opt,name=resource" json:"resource,omitempty"`
	Action      string            `protobuf:"bytes,4,opt,name=action" json:"action,omitempty"`
	Attributes  map[string]string `protobuf:"bytes,5,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ContextRequest) Reset()                    { *m = ContextRequest{} }
func (m *ContextRequest) String() string            { return proto.CompactTextString(m) }
func (*ContextRequest) ProtoMessage()               {}
func (*ContextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ContextRequest) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *ContextRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ContextRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ContextRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ContextRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type DiscoverRequestsResponse struct {
	Requests []*ContextRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
	Revision int64             `protobuf:"varint,2,opt,name=revision" json:"revision,omitempty"`
}

func (m *DiscoverRequestsResponse) Reset()                    { *m = DiscoverRequestsResponse{} }
func (m *DiscoverRequestsResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverRequestsResponse) ProtoMessage()               {}
func (*DiscoverRequestsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DiscoverRequestsResponse) GetRequests() []*ContextRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *DiscoverRequestsResponse) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type ResetRequestsRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
}

func (m *ResetRequestsRequest) Reset()                    { *m = ResetRequestsRequest{} }
func (m *ResetRequestsRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetRequestsRequest) ProtoMessage()               {}
func (*ResetRequestsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResetRequestsRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type ResetRequestsResponse struct {
}

func (m *ResetRequestsResponse) Reset()                    { *m = ResetRequestsResponse{} }
func (m *ResetRequestsResponse) String() string            { return proto.CompactTextString(m) }
func (*ResetRequestsResponse) ProtoMessage()               {}
func (*ResetRequestsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DiscoverPoliciesRequest struct {
	ServiceName   string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	PrincipalType string `protobuf:"bytes,2,opt,name=principalType" json:"principalType,omitempty"`
	PrincipalName string `protobuf:"bytes,3,opt,name=principalName" json:"principalName,omitempty"`
	PrincipalIdd  string `protobuf:"bytes,4,opt,name=principalIdd" json:"principalIdd,omitempty"`
}

func (m *DiscoverPoliciesRequest) Reset()                    { *m = DiscoverPoliciesRequest{} }
func (m *DiscoverPoliciesRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverPoliciesRequest) ProtoMessage()               {}
func (*DiscoverPoliciesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DiscoverPoliciesRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *DiscoverPoliciesRequest) GetPrincipalType() string {
	if m != nil {
		return m.PrincipalType
	}
	return ""
}

func (m *DiscoverPoliciesRequest) GetPrincipalName() string {
	if m != nil {
		return m.PrincipalName
	}
	return ""
}

func (m *DiscoverPoliciesRequest) GetPrincipalIdd() string {
	if m != nil {
		return m.PrincipalIdd
	}
	return ""
}

type DiscoverPoliciesResponse struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
	Revision int64      `protobuf:"varint,2,opt,name=revision" json:"revision,omitempty"`
}

func (m *DiscoverPoliciesResponse) Reset()                    { *m = DiscoverPoliciesResponse{} }
func (m *DiscoverPoliciesResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverPoliciesResponse) ProtoMessage()               {}
func (*DiscoverPoliciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DiscoverPoliciesResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *DiscoverPoliciesResponse) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type Function struct {
	Name           string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	FuncUrl        string `protobuf:"bytes,3,opt,name=funcUrl" json:"funcUrl,omitempty"`
	LocalFuncUrl   string `protobuf:"bytes,4,opt,name=localFuncUrl" json:"localFuncUrl,omitempty"`
	Ca             string `protobuf:"bytes,5,opt,name=ca" json:"ca,omitempty"`
	ResultCachable bool   `protobuf:"varint,6,opt,name=resultCachable" json:"resultCachable,omitempty"`
	ResultTTL      int64  `protobuf:"varint,7,opt,name=resultTTL" json:"resultTTL,omitempty"`
}

func (m *Function) Reset()                    { *m = Function{} }
func (m *Function) String() string            { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()               {}
func (*Function) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Function) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Function) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Function) GetFuncUrl() string {
	if m != nil {
		return m.FuncUrl
	}
	return ""
}

func (m *Function) GetLocalFuncUrl() string {
	if m != nil {
		return m.LocalFuncUrl
	}
	return ""
}

func (m *Function) GetCa() string {
	if m != nil {
		return m.Ca
	}
	return ""
}

func (m *Function) GetResultCachable() bool {
	if m != nil {
		return m.ResultCachable
	}
	return false
}

func (m *Function) GetResultTTL() int64 {
	if m != nil {
		return m.ResultTTL
	}
	return 0
}

type FunctionQueryRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Filters string `protobuf:"bytes,2,opt,name=filters" json:"filters,omitempty"`
}

func (m *FunctionQueryRequest) Reset()                    { *m = FunctionQueryRequest{} }
func (m *FunctionQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*FunctionQueryRequest) ProtoMessage()               {}
func (*FunctionQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FunctionQueryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FunctionQueryRequest) GetFilters() string {
	if m != nil {
		return m.Filters
	}
	return ""
}

type FunctionQueryResponse struct {
	Functions []*Function `protobuf:"bytes,1,rep,name=functions" json:"functions,omitempty"`
}

func (m *FunctionQueryResponse) Reset()                    { *m = FunctionQueryResponse{} }
func (m *FunctionQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*FunctionQueryResponse) ProtoMessage()               {}
func (*FunctionQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FunctionQueryResponse) GetFunctions() []*Function {
	if m != nil {
		return m.Functions
	}
	return nil
}

type AndPrincipals struct {
	Principals []string `protobuf:"bytes,1,rep,name=principals" json:"principals,omitempty"`
}

func (m *AndPrincipals) Reset()                    { *m = AndPrincipals{} }
func (m *AndPrincipals) String() string            { return proto.CompactTextString(m) }
func (*AndPrincipals) ProtoMessage()               {}
func (*AndPrincipals) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AndPrincipals) GetPrincipals() []string {
	if m != nil {
		return m.Principals
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ServiceRequest struct {
	Name string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type ServiceType `protobuf:"varint,2,opt,name=type,enum=pb.ServiceType" json:"type,omitempty"`
}

func (m *ServiceRequest) Reset()                    { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()               {}
func (*ServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceRequest) GetType() ServiceType {
	if m != nil {
		return m.Type
	}
	return ServiceType_APPLICATION
}

type PolicyRequest struct {
	ServiceName string  `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	Policy      *Policy `protobuf:"bytes,2,opt,name=policy" json:"policy,omitempty"`
}

func (m *PolicyRequest) Reset()                    { *m = PolicyRequest{} }
func (m *PolicyRequest) String() string            { return proto.CompactTextString(m) }
func (*PolicyRequest) ProtoMessage()               {}
func (*PolicyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PolicyRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *PolicyRequest) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type ServiceQueryResponse struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceQueryResponse) Reset()                    { *m = ServiceQueryResponse{} }
func (m *ServiceQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceQueryResponse) ProtoMessage()               {}
func (*ServiceQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ServiceQueryResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type ServiceQueryRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ServiceQueryRequest) Reset()                    { *m = ServiceQueryRequest{} }
func (m *ServiceQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceQueryRequest) ProtoMessage()               {}
func (*ServiceQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ServiceQueryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PolicyQueryRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	PolicyID    string `protobuf:"bytes,2,opt,name=policyID" json:"policyID,omitempty"`
	Filters     string `protobuf:"bytes,3,opt,name=filters" json:"filters,omitempty"`
}

func (m *PolicyQueryRequest) Reset()                    { *m = PolicyQueryRequest{} }
func (m *PolicyQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*PolicyQueryRequest) ProtoMessage()               {}
func (*PolicyQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PolicyQueryRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *PolicyQueryRequest) GetPolicyID() string {
	if m != nil {
		return m.PolicyID
	}
	return ""
}

func (m *PolicyQueryRequest) GetFilters() string {
	if m != nil {
		return m.Filters
	}
	return ""
}

type PolicyQueryResponse struct {
	Policies []*Policy `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
}

func (m *PolicyQueryResponse) Reset()                    { *m = PolicyQueryResponse{} }
func (m *PolicyQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*PolicyQueryResponse) ProtoMessage()               {}
func (*PolicyQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PolicyQueryResponse) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type Policy struct {
	Id          string               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Effect      Effect               `protobuf:"varint,3,opt,name=effect,enum=pb.Effect" json:"effect,omitempty"`
	Permissions []*Policy_Permission `protobuf:"bytes,4,rep,name=permissions" json:"permissions,omitempty"`
	Principals  []*AndPrincipals     `protobuf:"bytes,5,rep,name=principals" json:"principals,omitempty"`
	Condition   string               `protobuf:"bytes,6,opt,name=condition" json:"condition,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Policy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Policy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Policy) GetEffect() Effect {
	if m != nil {
		return m.Effect
	}
	return Effect_GRANT
}

func (m *Policy) GetPermissions() []*Policy_Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Policy) GetPrincipals() []*AndPrincipals {
	if m != nil {
		return m.Principals
	}
	return nil
}

func (m *Policy) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

type Policy_Permission struct {
	Resource           string   `protobuf:"bytes,1,opt,name=resource" json:"resource,omitempty"`
	ResourceExpression string   `protobuf:"bytes,2,opt,name=resource_expression,json=resourceExpression" json:"resource_expression,omitempty"`
	Actions            []string `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
}

func (m *Policy_Permission) Reset()                    { *m = Policy_Permission{} }
func (m *Policy_Permission) String() string            { return proto.CompactTextString(m) }
func (*Policy_Permission) ProtoMessage()               {}
func (*Policy_Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 0} }

func (m *Policy_Permission) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *Policy_Permission) GetResourceExpression() string {
	if m != nil {
		return m.ResourceExpression
	}
	return ""
}

func (m *Policy_Permission) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

type RolePolicyRequest struct {
	ServiceName string      `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	RolePolicy  *RolePolicy `protobuf:"bytes,2,opt,name=rolePolicy" json:"rolePolicy,omitempty"`
}

func (m *RolePolicyRequest) Reset()                    { *m = RolePolicyRequest{} }
func (m *RolePolicyRequest) String() string            { return proto.CompactTextString(m) }
func (*RolePolicyRequest) ProtoMessage()               {}
func (*RolePolicyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RolePolicyRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RolePolicyRequest) GetRolePolicy() *RolePolicy {
	if m != nil {
		return m.RolePolicy
	}
	return nil
}

type RolePolicyQueryRequest struct {
	ServiceName  string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	RolePolicyID string `protobuf:"bytes,2,opt,name=rolePolicyID" json:"rolePolicyID,omitempty"`
	Filters      string `protobuf:"bytes,3,opt,name=filters" json:"filters,omitempty"`
}

func (m *RolePolicyQueryRequest) Reset()                    { *m = RolePolicyQueryRequest{} }
func (m *RolePolicyQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*RolePolicyQueryRequest) ProtoMessage()               {}
func (*RolePolicyQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RolePolicyQueryRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RolePolicyQueryRequest) GetRolePolicyID() string {
	if m != nil {
		return m.RolePolicyID
	}
	return ""
}

func (m *RolePolicyQueryRequest) GetFilters() string {
	if m != nil {
		return m.Filters
	}
	return ""
}

type RolePolicyQueryResponse struct {
	RolePolicies []*RolePolicy `protobuf:"bytes,1,rep,name=rolePolicies" json:"rolePolicies,omitempty"`
}

func (m *RolePolicyQueryResponse) Reset()                    { *m = RolePolicyQueryResponse{} }
func (m *RolePolicyQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*RolePolicyQueryResponse) ProtoMessage()               {}
func (*RolePolicyQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RolePolicyQueryResponse) GetRolePolicies() []*RolePolicy {
	if m != nil {
		return m.RolePolicies
	}
	return nil
}

type RolePolicy struct {
	Id                  string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Effect              Effect   `protobuf:"varint,3,opt,name=effect,enum=pb.Effect" json:"effect,omitempty"`
	Roles               []string `protobuf:"bytes,4,rep,name=roles" json:"roles,omitempty"`
	Principals          []string `protobuf:"bytes,5,rep,name=principals" json:"principals,omitempty"`
	Resources           []string `protobuf:"bytes,6,rep,name=resources" json:"resources,omitempty"`
	ResourceExpressions []string `protobuf:"bytes,7,rep,name=resource_expressions,json=resourceExpressions" json:"resource_expressions,omitempty"`
	Condition           string   `protobuf:"bytes,8,opt,name=condition" json:"condition,omitempty"`
}

func (m *RolePolicy) Reset()                    { *m = RolePolicy{} }
func (m *RolePolicy) String() string            { return proto.CompactTextString(m) }
func (*RolePolicy) ProtoMessage()               {}
func (*RolePolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RolePolicy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RolePolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RolePolicy) GetEffect() Effect {
	if m != nil {
		return m.Effect
	}
	return Effect_GRANT
}

func (m *RolePolicy) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *RolePolicy) GetPrincipals() []string {
	if m != nil {
		return m.Principals
	}
	return nil
}

func (m *RolePolicy) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *RolePolicy) GetResourceExpressions() []string {
	if m != nil {
		return m.ResourceExpressions
	}
	return nil
}

func (m *RolePolicy) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

type Service struct {
	Name         string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type         ServiceType   `protobuf:"varint,2,opt,name=type,enum=pb.ServiceType" json:"type,omitempty"`
	Policies     []*Policy     `protobuf:"bytes,3,rep,name=policies" json:"policies,omitempty"`
	RolePolicies []*RolePolicy `protobuf:"bytes,4,rep,name=role_policies,json=rolePolicies" json:"role_policies,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetType() ServiceType {
	if m != nil {
		return m.Type
	}
	return ServiceType_APPLICATION
}

func (m *Service) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *Service) GetRolePolicies() []*RolePolicy {
	if m != nil {
		return m.RolePolicies
	}
	return nil
}

type PolicyAndRolePolicyCounts struct {
	PolicyCount     int64 `protobuf:"varint,1,opt,name=policyCount" json:"policyCount,omitempty"`
	RolePolicyCount int64 `protobuf:"varint,2,opt,name=rolePolicyCount" json:"rolePolicyCount,omitempty"`
}

func (m *PolicyAndRolePolicyCounts) Reset()                    { *m = PolicyAndRolePolicyCounts{} }
func (m *PolicyAndRolePolicyCounts) String() string            { return proto.CompactTextString(m) }
func (*PolicyAndRolePolicyCounts) ProtoMessage()               {}
func (*PolicyAndRolePolicyCounts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PolicyAndRolePolicyCounts) GetPolicyCount() int64 {
	if m != nil {
		return m.PolicyCount
	}
	return 0
}

func (m *PolicyAndRolePolicyCounts) GetRolePolicyCount() int64 {
	if m != nil {
		return m.RolePolicyCount
	}
	return 0
}

type PolicyCountsMap struct {
	CountMap map[string]*PolicyAndRolePolicyCounts `protobuf:"bytes,1,rep,name=countMap" json:"countMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PolicyCountsMap) Reset()                    { *m = PolicyCountsMap{} }
func (m *PolicyCountsMap) String() string            { return proto.CompactTextString(m) }
func (*PolicyCountsMap) ProtoMessage()               {}
func (*PolicyCountsMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PolicyCountsMap) GetCountMap() map[string]*PolicyAndRolePolicyCounts {
	if m != nil {
		return m.CountMap
	}
	return nil
}

func init() {
	proto.RegisterType((*DiscoverRequestsRequest)(nil), "pb.DiscoverRequestsRequest")
	proto.RegisterType((*Principal)(nil), "pb.Principal")
	proto.RegisterType((*Subject)(nil), "pb.Subject")
	proto.RegisterType((*ContextRequest)(nil), "pb.ContextRequest")
	proto.RegisterType((*DiscoverRequestsResponse)(nil), "pb.DiscoverRequestsResponse")
	proto.RegisterType((*ResetRequestsRequest)(nil), "pb.ResetRequestsRequest")
	proto.RegisterType((*ResetRequestsResponse)(nil), "pb.ResetRequestsResponse")
	proto.RegisterType((*DiscoverPoliciesRequest)(nil), "pb.DiscoverPoliciesRequest")
	proto.RegisterType((*DiscoverPoliciesResponse)(nil), "pb.DiscoverPoliciesResponse")
	proto.RegisterType((*Function)(nil), "pb.Function")
	proto.RegisterType((*FunctionQueryRequest)(nil), "pb.FunctionQueryRequest")
	proto.RegisterType((*FunctionQueryResponse)(nil), "pb.FunctionQueryResponse")
	proto.RegisterType((*AndPrincipals)(nil), "pb.AndPrincipals")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*ServiceRequest)(nil), "pb.ServiceRequest")
	proto.RegisterType((*PolicyRequest)(nil), "pb.PolicyRequest")
	proto.RegisterType((*ServiceQueryResponse)(nil), "pb.ServiceQueryResponse")
	proto.RegisterType((*ServiceQueryRequest)(nil), "pb.ServiceQueryRequest")
	proto.RegisterType((*PolicyQueryRequest)(nil), "pb.PolicyQueryRequest")
	proto.RegisterType((*PolicyQueryResponse)(nil), "pb.PolicyQueryResponse")
	proto.RegisterType((*Policy)(nil), "pb.Policy")
	proto.RegisterType((*Policy_Permission)(nil), "pb.Policy.Permission")
	proto.RegisterType((*RolePolicyRequest)(nil), "pb.RolePolicyRequest")
	proto.RegisterType((*RolePolicyQueryRequest)(nil), "pb.RolePolicyQueryRequest")
	proto.RegisterType((*RolePolicyQueryResponse)(nil), "pb.RolePolicyQueryResponse")
	proto.RegisterType((*RolePolicy)(nil), "pb.RolePolicy")
	proto.RegisterType((*Service)(nil), "pb.Service")
	proto.RegisterType((*PolicyAndRolePolicyCounts)(nil), "pb.PolicyAndRolePolicyCounts")
	proto.RegisterType((*PolicyCountsMap)(nil), "pb.PolicyCountsMap")
	proto.RegisterEnum("pb.Effect", Effect_name, Effect_value)
	proto.RegisterEnum("pb.ServiceType", ServiceType_name, ServiceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PolicyManager service

type PolicyManagerClient interface {
	CreateFunction(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Function, error)
	QueryFunctions(ctx context.Context, in *FunctionQueryRequest, opts ...grpc.CallOption) (*FunctionQueryResponse, error)
	DeleteFunctions(ctx context.Context, in *FunctionQueryRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Service, error)
	QueryServices(ctx context.Context, in *ServiceQueryRequest, opts ...grpc.CallOption) (*ServiceQueryResponse, error)
	DeleteServices(ctx context.Context, in *ServiceQueryRequest, opts ...grpc.CallOption) (*Empty, error)
	CreatePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	QueryPolicies(ctx context.Context, in *PolicyQueryRequest, opts ...grpc.CallOption) (*PolicyQueryResponse, error)
	DeletePolicies(ctx context.Context, in *PolicyQueryRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateRolePolicy(ctx context.Context, in *RolePolicyRequest, opts ...grpc.CallOption) (*RolePolicy, error)
	QueryRolePolicies(ctx context.Context, in *RolePolicyQueryRequest, opts ...grpc.CallOption) (*RolePolicyQueryResponse, error)
	DeleteRolePolicies(ctx context.Context, in *RolePolicyQueryRequest, opts ...grpc.CallOption) (*Empty, error)
	ListPolicyCounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PolicyCountsMap, error)
	GetDiscoverRequests(ctx context.Context, in *DiscoverRequestsRequest, opts ...grpc.CallOption) (*DiscoverRequestsResponse, error)
	ResetDiscoverRequests(ctx context.Context, in *ResetRequestsRequest, opts ...grpc.CallOption) (*ResetRequestsResponse, error)
	GetDiscoverPolicies(ctx context.Context, in *DiscoverPoliciesRequest, opts ...grpc.CallOption) (*DiscoverPoliciesResponse, error)
}

type policyManagerClient struct {
	cc *grpc.ClientConn
}

func NewPolicyManagerClient(cc *grpc.ClientConn) PolicyManagerClient {
	return &policyManagerClient{cc}
}

func (c *policyManagerClient) CreateFunction(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Function, error) {
	out := new(Function)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/CreateFunction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) QueryFunctions(ctx context.Context, in *FunctionQueryRequest, opts ...grpc.CallOption) (*FunctionQueryResponse, error) {
	out := new(FunctionQueryResponse)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/QueryFunctions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) DeleteFunctions(ctx context.Context, in *FunctionQueryRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/DeleteFunctions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) CreateService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/CreateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) QueryServices(ctx context.Context, in *ServiceQueryRequest, opts ...grpc.CallOption) (*ServiceQueryResponse, error) {
	out := new(ServiceQueryResponse)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/QueryServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) DeleteServices(ctx context.Context, in *ServiceQueryRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/DeleteServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) CreatePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/CreatePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) QueryPolicies(ctx context.Context, in *PolicyQueryRequest, opts ...grpc.CallOption) (*PolicyQueryResponse, error) {
	out := new(PolicyQueryResponse)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/QueryPolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) DeletePolicies(ctx context.Context, in *PolicyQueryRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/DeletePolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) CreateRolePolicy(ctx context.Context, in *RolePolicyRequest, opts ...grpc.CallOption) (*RolePolicy, error) {
	out := new(RolePolicy)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/CreateRolePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) QueryRolePolicies(ctx context.Context, in *RolePolicyQueryRequest, opts ...grpc.CallOption) (*RolePolicyQueryResponse, error) {
	out := new(RolePolicyQueryResponse)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/QueryRolePolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) DeleteRolePolicies(ctx context.Context, in *RolePolicyQueryRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/DeleteRolePolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) ListPolicyCounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PolicyCountsMap, error) {
	out := new(PolicyCountsMap)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/ListPolicyCounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) GetDiscoverRequests(ctx context.Context, in *DiscoverRequestsRequest, opts ...grpc.CallOption) (*DiscoverRequestsResponse, error) {
	out := new(DiscoverRequestsResponse)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/GetDiscoverRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) ResetDiscoverRequests(ctx context.Context, in *ResetRequestsRequest, opts ...grpc.CallOption) (*ResetRequestsResponse, error) {
	out := new(ResetRequestsResponse)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/ResetDiscoverRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) GetDiscoverPolicies(ctx context.Context, in *DiscoverPoliciesRequest, opts ...grpc.CallOption) (*DiscoverPoliciesResponse, error) {
	out := new(DiscoverPoliciesResponse)
	err := grpc.Invoke(ctx, "/pb.PolicyManager/GetDiscoverPolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PolicyManager service

type PolicyManagerServer interface {
	CreateFunction(context.Context, *Function) (*Function, error)
	QueryFunctions(context.Context, *FunctionQueryRequest) (*FunctionQueryResponse, error)
	DeleteFunctions(context.Context, *FunctionQueryRequest) (*Empty, error)
	CreateService(context.Context, *ServiceRequest) (*Service, error)
	QueryServices(context.Context, *ServiceQueryRequest) (*ServiceQueryResponse, error)
	DeleteServices(context.Context, *ServiceQueryRequest) (*Empty, error)
	CreatePolicy(context.Context, *PolicyRequest) (*Policy, error)
	QueryPolicies(context.Context, *PolicyQueryRequest) (*PolicyQueryResponse, error)
	DeletePolicies(context.Context, *PolicyQueryRequest) (*Empty, error)
	CreateRolePolicy(context.Context, *RolePolicyRequest) (*RolePolicy, error)
	QueryRolePolicies(context.Context, *RolePolicyQueryRequest) (*RolePolicyQueryResponse, error)
	DeleteRolePolicies(context.Context, *RolePolicyQueryRequest) (*Empty, error)
	ListPolicyCounts(context.Context, *Empty) (*PolicyCountsMap, error)
	GetDiscoverRequests(context.Context, *DiscoverRequestsRequest) (*DiscoverRequestsResponse, error)
	ResetDiscoverRequests(context.Context, *ResetRequestsRequest) (*ResetRequestsResponse, error)
	GetDiscoverPolicies(context.Context, *DiscoverPoliciesRequest) (*DiscoverPoliciesResponse, error)
}

func RegisterPolicyManagerServer(s *grpc.Server, srv PolicyManagerServer) {
	s.RegisterService(&_PolicyManager_serviceDesc, srv)
}

func _PolicyManager_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Function)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/CreateFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).CreateFunction(ctx, req.(*Function))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_QueryFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).QueryFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/QueryFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).QueryFunctions(ctx, req.(*FunctionQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_DeleteFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).DeleteFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/DeleteFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).DeleteFunctions(ctx, req.(*FunctionQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).CreateService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_QueryServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).QueryServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/QueryServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).QueryServices(ctx, req.(*ServiceQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_DeleteServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).DeleteServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/DeleteServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).DeleteServices(ctx, req.(*ServiceQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).CreatePolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_QueryPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).QueryPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/QueryPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).QueryPolicies(ctx, req.(*PolicyQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_DeletePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).DeletePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/DeletePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).DeletePolicies(ctx, req.(*PolicyQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_CreateRolePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).CreateRolePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/CreateRolePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).CreateRolePolicy(ctx, req.(*RolePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_QueryRolePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePolicyQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).QueryRolePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/QueryRolePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).QueryRolePolicies(ctx, req.(*RolePolicyQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_DeleteRolePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePolicyQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).DeleteRolePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/DeleteRolePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).DeleteRolePolicies(ctx, req.(*RolePolicyQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_ListPolicyCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListPolicyCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/ListPolicyCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListPolicyCounts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_GetDiscoverRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetDiscoverRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/GetDiscoverRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetDiscoverRequests(ctx, req.(*DiscoverRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_ResetDiscoverRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ResetDiscoverRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/ResetDiscoverRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ResetDiscoverRequests(ctx, req.(*ResetRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_GetDiscoverPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetDiscoverPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PolicyManager/GetDiscoverPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetDiscoverPolicies(ctx, req.(*DiscoverPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PolicyManager",
	HandlerType: (*PolicyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFunction",
			Handler:    _PolicyManager_CreateFunction_Handler,
		},
		{
			MethodName: "QueryFunctions",
			Handler:    _PolicyManager_QueryFunctions_Handler,
		},
		{
			MethodName: "DeleteFunctions",
			Handler:    _PolicyManager_DeleteFunctions_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _PolicyManager_CreateService_Handler,
		},
		{
			MethodName: "QueryServices",
			Handler:    _PolicyManager_QueryServices_Handler,
		},
		{
			MethodName: "DeleteServices",
			Handler:    _PolicyManager_DeleteServices_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _PolicyManager_CreatePolicy_Handler,
		},
		{
			MethodName: "QueryPolicies",
			Handler:    _PolicyManager_QueryPolicies_Handler,
		},
		{
			MethodName: "DeletePolicies",
			Handler:    _PolicyManager_DeletePolicies_Handler,
		},
		{
			MethodName: "CreateRolePolicy",
			Handler:    _PolicyManager_CreateRolePolicy_Handler,
		},
		{
			MethodName: "QueryRolePolicies",
			Handler:    _PolicyManager_QueryRolePolicies_Handler,
		},
		{
			MethodName: "DeleteRolePolicies",
			Handler:    _PolicyManager_DeleteRolePolicies_Handler,
		},
		{
			MethodName: "ListPolicyCounts",
			Handler:    _PolicyManager_ListPolicyCounts_Handler,
		},
		{
			MethodName: "GetDiscoverRequests",
			Handler:    _PolicyManager_GetDiscoverRequests_Handler,
		},
		{
			MethodName: "ResetDiscoverRequests",
			Handler:    _PolicyManager_ResetDiscoverRequests_Handler,
		},
		{
			MethodName: "GetDiscoverPolicies",
			Handler:    _PolicyManager_GetDiscoverPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x16, 0x25, 0xeb, 0x34, 0xb2, 0x64, 0x79, 0x6d, 0xc7, 0x8c, 0xfe, 0xe4, 0x87, 0xbb, 0x6d,
	0x53, 0x37, 0x40, 0x65, 0x44, 0xe9, 0xc1, 0x68, 0x61, 0x14, 0x8e, 0xac, 0x04, 0x46, 0x6d, 0xd7,
	0xa5, 0x9d, 0x8b, 0xf6, 0xc6, 0xa0, 0xa8, 0x75, 0xca, 0x86, 0x21, 0x59, 0x2e, 0x65, 0x44, 0x6f,
	0xd1, 0xeb, 0xde, 0xf4, 0x01, 0xda, 0x77, 0xe9, 0x4d, 0x5f, 0xa6, 0x77, 0xc5, 0x1e, 0xb8, 0xdc,
	0xa5, 0x14, 0x1f, 0x8a, 0x5e, 0x89, 0x3b, 0x33, 0x3b, 0xf3, 0xcd, 0xec, 0x37, 0xb3, 0xa4, 0xa0,
	0x4d, 0x49, 0x72, 0xe5, 0x7b, 0xa4, 0x1f, 0x27, 0x51, 0x1a, 0xa1, 0x72, 0x3c, 0xc6, 0xaf, 0x61,
	0xf3, 0xc0, 0xa7, 0x5e, 0x74, 0x45, 0x12, 0x87, 0xfc, 0x3c, 0x25, 0x34, 0xa5, 0xf2, 0x17, 0x6d,
	0x41, 0x4b, 0xda, 0x9f, 0xb8, 0x6f, 0x88, 0x6d, 0x6d, 0x59, 0xdb, 0x4d, 0x47, 0x17, 0x21, 0x04,
	0x4b, 0x81, 0x4b, 0x53, 0xbb, 0xbc, 0x65, 0x6d, 0x37, 0x1c, 0xfe, 0x8c, 0x7a, 0xd0, 0x48, 0xc8,
	0x95, 0x4f, 0xfd, 0x28, 0xb4, 0x2b, 0x5b, 0xd6, 0x76, 0xc5, 0x51, 0x6b, 0x3c, 0x82, 0xe6, 0x69,
	0xe2, 0x87, 0x9e, 0x1f, 0xbb, 0x01, 0xdb, 0x9c, 0xce, 0xe2, 0xcc, 0x2f, 0x7f, 0x66, 0xb2, 0x90,
	0xc5, 0x2a, 0x0b, 0x19, 0x7b, 0x46, 0x5d, 0xa8, 0xf8, 0x93, 0x09, 0xf7, 0xd5, 0x74, 0xd8, 0x23,
	0x0e, 0xa0, 0x7e, 0x36, 0x1d, 0xff, 0x44, 0xbc, 0x14, 0x7d, 0x02, 0x10, 0x67, 0x1e, 0xa9, 0x6d,
	0x6d, 0x55, 0xb6, 0x5b, 0x83, 0x76, 0x3f, 0x1e, 0xf7, 0x55, 0x1c, 0x47, 0x33, 0x40, 0x0f, 0xa0,
	0x99, 0x46, 0xaf, 0x49, 0x78, 0xce, 0x02, 0x8b, 0x20, 0xb9, 0x00, 0xad, 0x43, 0x95, 0x2f, 0x64,
	0x2c, 0xb1, 0xc0, 0xbf, 0x94, 0xa1, 0x33, 0x8c, 0xc2, 0x94, 0xbc, 0x4d, 0xb3, 0xca, 0x7c, 0x08,
	0x75, 0x2a, 0x00, 0x70, 0xf4, 0xad, 0x41, 0x8b, 0x85, 0x94, 0x98, 0x9c, 0x4c, 0x57, 0x2c, 0x60,
	0x79, 0xbe, 0x80, 0xbc, 0x58, 0x34, 0x9a, 0x26, 0x1e, 0x91, 0x41, 0xd5, 0x1a, 0xdd, 0x83, 0x9a,
	0xeb, 0xa5, 0xac, 0x8c, 0x4b, 0x5c, 0x23, 0x57, 0xe8, 0x19, 0x80, 0x9b, 0xa6, 0x89, 0x3f, 0x9e,
	0xa6, 0x84, 0xda, 0x55, 0x9e, 0x32, 0x66, 0xf1, 0x4d, 0x90, 0xfd, 0x7d, 0x65, 0x34, 0x0a, 0xd3,
	0x64, 0xe6, 0x68, 0xbb, 0x7a, 0x7b, 0xb0, 0x52, 0x50, 0xb3, 0x32, 0xbf, 0x26, 0x33, 0x79, 0x1a,
	0xec, 0x91, 0x95, 0xe3, 0xca, 0x0d, 0xa6, 0x19, 0x70, 0xb1, 0xf8, 0xb2, 0xbc, 0x6b, 0xe1, 0x4b,
	0xb0, 0xe7, 0x49, 0x43, 0xe3, 0x28, 0xa4, 0x04, 0xf5, 0x59, 0x4a, 0x42, 0x26, 0xcf, 0x03, 0xcd,
	0x83, 0x73, 0x94, 0x8d, 0xc1, 0x97, 0x72, 0x81, 0x2f, 0xbb, 0xb0, 0xee, 0x10, 0x4a, 0xd2, 0x3b,
	0x33, 0x13, 0x6f, 0xc2, 0x46, 0x61, 0xa7, 0x80, 0x87, 0x7f, 0xb7, 0x72, 0xc2, 0x9f, 0x46, 0x81,
	0xef, 0xf9, 0xe4, 0x0e, 0x84, 0xff, 0x00, 0xda, 0x8a, 0x4d, 0x1a, 0x87, 0x4c, 0xa1, 0x61, 0xc5,
	0x3d, 0x55, 0x0a, 0x56, 0xdc, 0x17, 0x86, 0x65, 0x25, 0x38, 0x9c, 0x4c, 0xe4, 0x29, 0x1b, 0x32,
	0x7c, 0x91, 0x17, 0x3a, 0x07, 0x2b, 0x0b, 0xfd, 0x11, 0x34, 0x24, 0xb4, 0xac, 0xd0, 0x82, 0x85,
	0x42, 0xe6, 0x28, 0xe5, 0xb5, 0x15, 0xfe, 0xcb, 0x82, 0xc6, 0xf3, 0x69, 0x28, 0x98, 0x95, 0x75,
	0x9f, 0xa5, 0x75, 0xdf, 0x16, 0xb4, 0x26, 0x84, 0x7a, 0x89, 0x1f, 0xa7, 0xd9, 0xfe, 0xa6, 0xa3,
	0x8b, 0x90, 0x0d, 0xf5, 0xcb, 0x69, 0xe8, 0xbd, 0x4c, 0x02, 0x99, 0x67, 0xb6, 0x64, 0x19, 0x06,
	0x91, 0xe7, 0x06, 0xcf, 0xa5, 0x5a, 0x66, 0xa8, 0xcb, 0x50, 0x07, 0xca, 0x9e, 0x6b, 0x57, 0xb9,
	0xa6, 0xec, 0xb9, 0xe8, 0x11, 0x74, 0x12, 0x42, 0xa7, 0x41, 0x3a, 0x74, 0xbd, 0x1f, 0xdd, 0x71,
	0x40, 0xec, 0x1a, 0x1f, 0x2e, 0x05, 0x29, 0xeb, 0x64, 0x21, 0x39, 0x3f, 0x3f, 0xb2, 0xeb, 0x3c,
	0xab, 0x5c, 0x80, 0x0f, 0x60, 0x3d, 0xcb, 0xea, 0xbb, 0x29, 0x49, 0x66, 0xd9, 0x09, 0x2f, 0xca,
	0x90, 0xe1, 0xf7, 0x83, 0x94, 0x24, 0x54, 0x66, 0x97, 0x2d, 0xf1, 0x10, 0x36, 0x0a, 0x5e, 0x64,
	0xe9, 0x1f, 0x43, 0xf3, 0x52, 0x2a, 0xb2, 0xda, 0x2f, 0xb3, 0xda, 0x67, 0xd6, 0x4e, 0xae, 0xc6,
	0x3b, 0xd0, 0xde, 0x0f, 0x27, 0xa7, 0xf9, 0x0c, 0xfa, 0xff, 0xdc, 0xc8, 0x6a, 0xea, 0x33, 0x0a,
	0xd7, 0xa1, 0x3a, 0x7a, 0x13, 0xa7, 0x33, 0x7c, 0x08, 0x9d, 0xec, 0x30, 0xaf, 0x81, 0xff, 0xbe,
	0x1c, 0xa3, 0x0c, 0x7b, 0x67, 0xb0, 0xa2, 0x51, 0x80, 0x71, 0x51, 0xcc, 0x55, 0xfc, 0x12, 0xda,
	0x9c, 0x3f, 0xb3, 0xdb, 0x53, 0x1d, 0x43, 0x2d, 0xe6, 0x5b, 0xb8, 0xe7, 0xd6, 0x00, 0xf8, 0x54,
	0x15, 0x4e, 0xa4, 0x06, 0x7f, 0x0d, 0xeb, 0x32, 0x96, 0x59, 0x9f, 0xdb, 0x52, 0x13, 0x7f, 0x0c,
	0x6b, 0xa6, 0x83, 0x77, 0xe6, 0x89, 0x03, 0x40, 0x22, 0xba, 0x61, 0x79, 0x73, 0x1e, 0x3d, 0x68,
	0x08, 0xb4, 0x87, 0x07, 0xf2, 0x7c, 0xd5, 0x5a, 0x3f, 0xfa, 0x8a, 0x79, 0xf4, 0x7b, 0xb0, 0x66,
	0x44, 0x93, 0x89, 0x3d, 0x92, 0xce, 0x7c, 0x95, 0x98, 0x5e, 0x16, 0xa5, 0xc3, 0x7f, 0x96, 0xa1,
	0x26, 0x84, 0x8c, 0xe0, 0xfe, 0x44, 0x02, 0x2b, 0xfb, 0x93, 0x85, 0x57, 0x1c, 0x86, 0x1a, 0xb9,
	0xbc, 0x64, 0xd7, 0x49, 0x85, 0x9f, 0x22, 0x77, 0x3a, 0xe2, 0x12, 0x47, 0x6a, 0xd0, 0x17, 0xd0,
	0x8a, 0x49, 0xf2, 0xc6, 0xa7, 0x94, 0xb3, 0x6e, 0x89, 0x47, 0xdf, 0xc8, 0xa3, 0xf7, 0x4f, 0x95,
	0xd6, 0xd1, 0x2d, 0xd1, 0x13, 0x83, 0x6f, 0xe2, 0xbe, 0x58, 0x65, 0xfb, 0x0c, 0x5a, 0x16, 0xaf,
	0x49, 0x2f, 0x0a, 0x27, 0x3e, 0x6f, 0xf9, 0x9a, 0xb8, 0x26, 0x95, 0xa0, 0x47, 0x01, 0xf2, 0x58,
	0xc6, 0x15, 0x66, 0x15, 0xae, 0xb0, 0x1d, 0x58, 0xcb, 0x9e, 0x2f, 0xc8, 0xdb, 0x38, 0x21, 0x94,
	0xe6, 0x43, 0x04, 0x65, 0xaa, 0x91, 0xd2, 0xb0, 0x03, 0x71, 0x65, 0x5b, 0x55, 0x78, 0x63, 0x64,
	0x4b, 0x4c, 0x60, 0xd5, 0x89, 0x02, 0x72, 0x57, 0x16, 0xf7, 0x01, 0x12, 0xb5, 0x4d, 0x32, 0xb9,
	0xc3, 0x92, 0xd7, 0x9c, 0x69, 0x16, 0xf8, 0x2d, 0xdc, 0xcb, 0x35, 0x77, 0x64, 0x1a, 0x86, 0xe5,
	0xdc, 0x93, 0x62, 0x9b, 0x21, 0xbb, 0x86, 0x71, 0xc7, 0xb0, 0x39, 0x17, 0x59, 0xb2, 0x6e, 0xa0,
	0x39, 0xce, 0x99, 0x57, 0x4c, 0xc3, 0xb0, 0xc1, 0x7f, 0x5b, 0x00, 0xb9, 0xf2, 0x3f, 0x63, 0xe1,
	0x3a, 0x54, 0x59, 0x18, 0xc1, 0xbf, 0xa6, 0x23, 0x16, 0x85, 0x91, 0x56, 0x2d, 0x8e, 0x34, 0x39,
	0xac, 0xf9, 0x61, 0x53, 0xbb, 0xc6, 0xd5, 0xb9, 0x00, 0x3d, 0x81, 0xf5, 0x05, 0x2c, 0xa1, 0x76,
	0x9d, 0x1b, 0xae, 0xcd, 0xd3, 0xa4, 0x40, 0xd0, 0x46, 0x81, 0xa0, 0xf8, 0x37, 0x0b, 0xea, 0x72,
	0xac, 0xfc, 0xeb, 0x91, 0x69, 0xb4, 0x7a, 0xe5, 0xdd, 0xad, 0x8e, 0x9e, 0x42, 0x9b, 0x15, 0xe1,
	0x42, 0x19, 0x2f, 0xdd, 0xe2, 0x74, 0x5e, 0xc1, 0x7d, 0x21, 0xdf, 0x0f, 0x27, 0xb9, 0xd1, 0x30,
	0x9a, 0x86, 0x29, 0x65, 0x4c, 0x8b, 0xf3, 0x35, 0x47, 0x5e, 0x71, 0x74, 0x11, 0xda, 0x86, 0x95,
	0xc4, 0xdc, 0x25, 0x2f, 0xf6, 0xa2, 0x18, 0xff, 0x61, 0xc1, 0x8a, 0xee, 0xfc, 0xd8, 0x8d, 0xd1,
	0x1e, 0x34, 0x3c, 0xb6, 0x38, 0x76, 0x63, 0x49, 0xa5, 0xf7, 0xf2, 0xcc, 0x94, 0x59, 0x7f, 0x28,
	0x6d, 0xc4, 0xdb, 0xa3, 0xda, 0xd2, 0xfb, 0x01, 0xda, 0x86, 0x6a, 0xc1, 0x9b, 0xe3, 0x53, 0xfd,
	0xcd, 0xb1, 0x35, 0x78, 0x98, 0xbb, 0x5f, 0x90, 0xaf, 0xf6, 0x62, 0xf9, 0xf8, 0x21, 0xd4, 0x04,
	0xe1, 0x50, 0x13, 0xaa, 0x2f, 0x9c, 0xfd, 0x93, 0xf3, 0x6e, 0x09, 0x35, 0x60, 0xe9, 0x60, 0x74,
	0xf2, 0x7d, 0xd7, 0x7a, 0xbc, 0x03, 0x2d, 0xed, 0xa0, 0xd0, 0x0a, 0xb4, 0xf6, 0x4f, 0x4f, 0x8f,
	0x0e, 0x87, 0xfb, 0xe7, 0x87, 0xdf, 0x9e, 0x74, 0x4b, 0x4c, 0xf0, 0xcd, 0xee, 0xd9, 0xc5, 0xf0,
	0xe8, 0xe5, 0xd9, 0xf9, 0xc8, 0xe9, 0x5a, 0x83, 0x5f, 0x1b, 0xd9, 0xc5, 0x77, 0xec, 0x86, 0xee,
	0x2b, 0x92, 0xa0, 0x3e, 0x74, 0x86, 0x09, 0x71, 0x53, 0xa2, 0xde, 0x7a, 0x8c, 0x9b, 0xbb, 0x67,
	0xac, 0x70, 0x09, 0xbd, 0x80, 0x0e, 0x6f, 0xc6, 0x4c, 0x44, 0x91, 0xad, 0x5b, 0xe8, 0x23, 0xa2,
	0x77, 0x7f, 0x81, 0x46, 0xbe, 0x76, 0x96, 0xd0, 0x2e, 0xac, 0x1c, 0x90, 0x80, 0xe4, 0x81, 0xaf,
	0xf3, 0xd4, 0xe4, 0xad, 0xc7, 0xdf, 0x02, 0x4a, 0x68, 0x00, 0x6d, 0x01, 0x59, 0x71, 0x5a, 0xbf,
	0x4c, 0xe5, 0x0e, 0xfd, 0x82, 0xc5, 0x25, 0x74, 0x00, 0x6d, 0xee, 0xf0, 0x2c, 0x7b, 0x09, 0xdc,
	0xd4, 0xf4, 0x46, 0x28, 0x7b, 0x5e, 0xa1, 0x30, 0x7f, 0x0e, 0x1d, 0x81, 0xf9, 0x66, 0x37, 0x06,
	0xe2, 0x1d, 0x58, 0x16, 0x88, 0xe5, 0xf4, 0x59, 0xd5, 0x3a, 0x47, 0xda, 0x6b, 0xcd, 0x84, 0x4b,
	0xe8, 0x99, 0x84, 0x9b, 0x35, 0x08, 0xba, 0x97, 0xab, 0x8d, 0x30, 0x9b, 0x73, 0x72, 0x05, 0xf6,
	0xb3, 0x0c, 0xec, 0x8d, 0x4e, 0x0c, 0xac, 0x5f, 0x41, 0x57, 0x60, 0xd5, 0xa6, 0xe5, 0x46, 0xa1,
	0x79, 0xe5, 0xbe, 0x42, 0x4f, 0xe3, 0x12, 0x3a, 0x81, 0x55, 0xe1, 0x59, 0x6b, 0x6e, 0xd4, 0x33,
	0xcd, 0x8c, 0xd0, 0xff, 0x5b, 0xa8, 0x53, 0x39, 0xec, 0x01, 0x12, 0x39, 0xdc, 0xda, 0xa1, 0x91,
	0xcb, 0xa7, 0xd0, 0x3d, 0xf2, 0x69, 0x6a, 0x4c, 0x93, 0xdc, 0xa0, 0xb7, 0xb6, 0xa0, 0xcd, 0x71,
	0x09, 0x39, 0xb0, 0xf6, 0x82, 0xa4, 0xc5, 0x0f, 0x3a, 0xc4, 0xa1, 0xbe, 0xe3, 0xbf, 0x81, 0xde,
	0x83, 0xc5, 0x4a, 0x95, 0xc8, 0x89, 0xfc, 0xfe, 0x9a, 0xf3, 0xca, 0xe9, 0xb6, 0xe8, 0xa3, 0x4e,
	0x74, 0xcf, 0xe2, 0x8f, 0xb6, 0x22, 0x46, 0x55, 0x19, 0x03, 0x63, 0xe1, 0x73, 0xce, 0xc4, 0x58,
	0xfc, 0x7c, 0xc2, 0xa5, 0x71, 0x8d, 0xff, 0x0b, 0xf2, 0xf4, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x77, 0xb6, 0x2a, 0x0a, 0x16, 0x11, 0x00, 0x00,
}
