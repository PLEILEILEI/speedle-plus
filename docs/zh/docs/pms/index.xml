<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Speedle策略 on Speedle</title>
    <link>/zh/docs/pms/</link>
    <description>Recent content in Speedle策略 on Speedle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 18 Jan 2019 21:19:44 +0800</lastBuildDate>
    
	<atom:link href="/zh/docs/pms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>策略管理</title>
      <link>/zh/docs/pms/policy-mgmt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zh/docs/pms/policy-mgmt/</guid>
      <description>What is a Speedle policy? A Speedle policy is a set of criteria that specify whether a user is granted access to a particular protected resource or assignment to a particular role. You manage Speedle policies using the Speedle Policy Management Service(PMS).
Understanding the Speedle Policy Module Note: The Speedle syntax used in this document is defined in SPDL - Security Policy Definition Language.
Policy store The policy store maintains all policy artifacts and can be persisted to an etcd store or a JSON file.</description>
    </item>
    
    <item>
      <title>全局角色策略</title>
      <link>/zh/docs/pms/global-policy/</link>
      <pubDate>Fri, 18 Jan 2019 21:19:44 +0800</pubDate>
      
      <guid>/zh/docs/pms/global-policy/</guid>
      <description>什么时候需要全局角色 对于简单的应用，使用 RBAC（Role-based access control），我们通常把角色和授权都放在 SPEEDLE 的一个 service 里。
然而在某些情况下，也许是一个由许多相对独立的子系统组成的复杂系统，也许你有很多个独立的应用但共享同一套身份系统，每个子系统或者应用都有自己的 SPEEDLE service。这样你就会有很多个 service，每个 service 里的角色都是独立的。同一个用户在一个 service 里的角色不会在另一个 service 里生效。如果有一些角色策略对所有 service 都是一样的，而你不想重复的去在每个 service 里定义它们，这时候你就可以把它们定义为全局角色。
定义全局角色策略  首先需要创建一个名字为&amp;rsquo;global&amp;rsquo;的 service：  spctl create service global  然后就可以在&amp;rsquo;global&amp;rsquo; service 里创建角色了：  spctl create rolepolicy -c &amp;#34;grant user Emma AdminRole&amp;#34; --service-name=global 使用全局角色策略  在其它的 service 里定义角色或者授权时，可以引用全局角色：  spctl create policy -c &amp;#34;grant role AdminRole borrow books&amp;#34; --service-name=library  运行时全局角色会生效：  curl -X POST http://localhost:6734/authz-check/v1/is-allowed \ -d @- &amp;lt;&amp;lt; EOF { &amp;#34;subject&amp;#34;: {&amp;#34;principals&amp;#34;:[{&amp;#34;type&amp;#34;:&amp;#34;user&amp;#34;, &amp;#34;name&amp;#34;:&amp;#34;Emma&amp;#34;}]}, &amp;#34;serviceName&amp;#34;: &amp;#34;library&amp;#34;, &amp;#34;resource&amp;#34;:&amp;#34;books&amp;#34;, &amp;#34;action&amp;#34;: &amp;#34;borrow&amp;#34; } EOF 将会返回 allowed = true。因为 Emma 有全局角色 AdminRole，而在 service ‘library’里，我们给予了 AdminRole 这个权限。</description>
    </item>
    
    <item>
      <title>授权诊断</title>
      <link>/zh/docs/pms/diagnosis/</link>
      <pubDate>Fri, 18 Jan 2019 15:46:59 +0800</pubDate>
      
      <guid>/zh/docs/pms/diagnosis/</guid>
      <description>授权诊断是 Speedle 的一个高级特性，用于诊断授权评估的过程。当一个用户被拒绝操作一个资源时，这个特性就可以用来找出拒绝的原因，例如，是哪条策略（policy）导致用户对资源的操作被拒绝的。
授权诊断响应包的格式 授权诊断响应包的格式如下：
type EvaluationDebugResponse struct { Allowed bool `json:&amp;#34;allowed&amp;#34;` Reason string `json:&amp;#34;reason&amp;#34;` RequestCtx *RequestContext `json:&amp;#34;requestContext,omitempty&amp;#34;` Attributes map[string]interface{} `json:&amp;#34;attributes,omitempty&amp;#34;` GrantedRoles []string `json:&amp;#34;grantedRoles,omitempty&amp;#34;` RolePolicies []*EvaluatedRolePolicy `json:&amp;#34;rolePolicies,omitempty&amp;#34;` Policies []*EvaluatedPolicy `json:&amp;#34;policies,omitempty&amp;#34;` } type EvaluatedPolicy struct { Status string `json:&amp;#34;status,omitempty&amp;#34;` ID string `json:&amp;#34;id,omitempty&amp;#34;` Name string `json:&amp;#34;name,omitempty&amp;#34;` Effect string `json:&amp;#34;effect,omitempty&amp;#34;` Permissions []Permission `json:&amp;#34;permissions,omitempty&amp;#34;` Principals []string `json:&amp;#34;principals,omitempty&amp;#34;` Condition *EvaluatedCondition `json:&amp;#34;condition,omitempty&amp;#34;` } type EvaluatedRolePolicy struct { Status string `json:&amp;#34;status,omitempty&amp;#34;` ID string `json:&amp;#34;id,omitempty&amp;#34;` Name string `json:&amp;#34;name,omitempty&amp;#34;` Effect string `json:&amp;#34;effect,omitempty&amp;#34;` Roles []string `json:&amp;#34;roles,omitempty&amp;#34;` Principals []string `json:&amp;#34;principals,omitempty&amp;#34;` Resources []string `json:&amp;#34;resources,omitempty&amp;#34;` ResourceExpressions []string `json:&amp;#34;resourceExpression,omitempty&amp;#34;` Condition *EvaluatedCondition `json:&amp;#34;condition,omitempty&amp;#34;` } type EvaluatedCondition struct { ConditionExpression string `json:&amp;#34;conditionExpression,omitempty&amp;#34;` EvaluationResult string `json:&amp;#34;evaluationResult,omitempty&amp;#34;` } 示例 注意：原请求中的属性以及 Speedle 内置的属性都会包含在诊断响应包的属性列表中。</description>
    </item>
    
    <item>
      <title>策略发现</title>
      <link>/zh/docs/pms/discover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/zh/docs/pms/discover/</guid>
      <description>什么是 discovery mode? 当一个系统使用 Speedle 作为权限控制引擎时，在所有保护资源被访问之前， 都会向 Speedle 的 ARS(Authorization Runtime Service)发 authorization 请求。所有的 authorization 请求都被被发送到 Speedle ARS 的 is-allowed RESTful endpoint。ARS 根据系统中的所有 policy 计算出当前请求的资源访问是否允许。
当系统中需要保护的资源越来越多，为这些资源创建 policy 就是一件比较痛苦的事情。因为 policy 的制定者需要知道如何在 policy 中正确表述资源。discover mode 就是为了解决这一痛点而设计的。简单来说， 我们提供了一个和 is-allowed 有着相同输入和输出的接口 discover, 这个接口永远返回 allowed, 同时记录下 authorization 请求。并提供命令行工具查询被 discover 接口记录下的 authorization 请求,甚至为这些请求生成 Policy.
当我们把系统中的 is-allowed 接口统统换成 discover 接口,我们称系统工作在 discovery mode.
discovery mode 能帮我们做什么?  记录 authorization 请求的内容
 根据记录的 authorization 请求生成 Policy
 关闭权限检查</description>
    </item>
    
  </channel>
</rss>